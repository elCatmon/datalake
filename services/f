a partir de las siguientes funciones quiero que regrese el diagnostico dl estudio y la clave de la imagen que se esta usando para hacer las busquedas
// BuscarEstudioIDImagenNombre busca el _id del estudio que contiene una imagen por su nombre.
func BuscarEstudioIDImagen(imagenNombre string, db *mongo.Database) (primitive.ObjectID, error) {

	log.Println("Iniciando búsqueda del estudio para la imagen:", imagenNombre)

	// Buscando la imagen en la colección de archivos (imagenes.files)
	fileCollection := db.Collection("imagenes.files")
	fileFilter := bson.M{"filename": imagenNombre}
	var fileDoc models.FileDocument

	log.Println("Buscando en la colección 'imagenes.files' con el filtro:", fileFilter)
	err := fileCollection.FindOne(context.Background(), fileFilter).Decode(&fileDoc)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			log.Printf("No se encontró la imagen con el nombre: %s", imagenNombre)
			return primitive.ObjectID{}, fmt.Errorf("no se encontró la imagen con el nombre: %s", imagenNombre)
		}
		log.Printf("Error al buscar la imagen: %v", err)
		return primitive.ObjectID{}, fmt.Errorf("error al buscar la imagen: %v", err)
	}

	log.Println("Imagen encontrada en 'imagenes.files':", fileDoc)

	// Buscando el estudio utilizando el ID de la imagen (como cadena de texto)
	studyCollection := db.Collection("estudios")
	studyFilter := bson.M{"imagenes.dicom": fileDoc.ID.Hex()} // Convertir el ObjectID a su representación hexadecimal (cadena)

	log.Println("Buscando en la colección 'estudios' con el filtro:", studyFilter)
	var estudio models.EstudioDocument
	err = studyCollection.FindOne(context.Background(), studyFilter).Decode(&estudio)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			log.Printf("No se encontró el estudio que contiene la imagen con ID: %v", fileDoc.ID)
			return primitive.ObjectID{}, fmt.Errorf("no se encontró el estudio que contiene la imagen")
		}
		log.Printf("Error al buscar el estudio: %v", err)
		return primitive.ObjectID{}, fmt.Errorf("error al buscar el estudio: %v", err)
	}

	log.Println("Estudio encontrado:", estudio)

	// Devolver el ID del estudio encontrado
	log.Println("Devolviendo el ID del estudio:", estudio.ID)
	return estudio.ID, nil
}


// BuscarDiagnosticoReciente busca el diagnóstico más reciente de un estudio dado su _id
func BuscarDiagnosticoReciente(ctx context.Context, db *mongo.Database, id primitive.ObjectID) (*models.Diagnostico, error) {
	// Definir la colección
	collection := db.Collection("estudios")

	// Buscar el documento por _id
	var estudio models.EstudioDocument
	filter := bson.M{"_id": id}
	err := collection.FindOne(ctx, filter).Decode(&estudio)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, errors.New("no se encontró el documento con el ID proporcionado")
		}
		return nil, err
	}

	// Si no tiene diagnósticos, regresar un error
	if len(estudio.Diagnostico) == 0 {
		return nil, errors.New("el estudio no tiene diagnósticos")
	}

	// Encontrar el diagnóstico más reciente
	var diagnosticoReciente models.Diagnostico
	for _, diag := range estudio.Diagnostico {
		if diag.Fecha.After(diagnosticoReciente.Fecha) {
			diagnosticoReciente = diag
		}
	}

	return &diagnosticoReciente, nil
}
esta es la estrctura de los documentos de mongo
type Imagen struct {
	Clave       string `bson:"clave"`
	Dicom       string `bson:"dicom"`
	Imagen      string `bson:"imagen"`
	Anonimizada bool   `bson:"anonimizada"`
}

type Diagnostico struct {
	Hallazgos     string    `bson:"hallazgos"`
	Impresion     string    `bson:"impresion"`
	Observaciones string    `bson:"observaciones"`
	Fecha         time.Time `bson:"fecha_Emision"`
	Medico        string    `bson:"realizo"`
}

type EstudioDocument struct {
	ID          primitive.ObjectID `bson:"_id,omitempty"`
	EstudioID   string             `bson:"estudio_ID"`
	Donador     string             `bson:"donador"`
	Hash        string             `bson:"hash"`
	Status      int                `bson:"status"`
	Imagenes    []Imagen           `bson:"imagenes"`
	Diagnostico []Diagnostico      `bson:"diagnostico"`
}
este es un ejemplo del documento de mongo{
  "_id": {
    "$oid": "66fbfb2df8d2fdad53229fa0"
  },
  "estudio_ID": "66fbfb2df8d2fdad53229f6b",
  "donador": "DonadorEjemplo",
  "hash": "b3c49f92cdddc3cb1e7fa3eb84071e339a5f24ecc70dfec20b3959dadabddbae",
  "status": 1,
  "imagenes": [
    {
      "clave": "01000000100",
      "dicom": "66fbfb2df8d2fdad53229f6c",
      "imagen": "",
      "anonimizada": false
    },
    {
      "clave": "01000000100",
      "dicom": "66fbfb2df8d2fdad53229f73",
      "imagen": "",
      "anonimizada": false
    },
    {
      "clave": "01000000100",
      "dicom": "66fbfb2df8d2fdad53229f7b",
      "imagen": "",
      "anonimizada": false
    },
    {
      "clave": "01000000100",
      "dicom": "66fbfb2df8d2fdad53229f83",
      "imagen": "66fbfb2df8d2fdad53229f8a",
      "anonimizada": true
    },
    {
      "clave": "01000000100",
      "dicom": "66fbfb2df8d2fdad53229f8c",
      "imagen": "66fbfb2df8d2fdad53229f94",
      "anonimizada": true
    },
    {
      "clave": "01000000100",
      "dicom": "66fbfb2df8d2fdad53229f96",
      "imagen": "66fbfb2df8d2fdad53229f9e",
      "anonimizada": true
    }
  ],
  "diagnostico": [
    {
      "hallazgos": "",
      "impresion": "",
      "observaciones": "",
      "fecha_Emision": {
        "$date": {
          "$numberLong": "-62135596800000"
        }
      },
      "realizo": ""
    },
    {
      "hallazgos": "sdfgsdf",
      "impresion": "dshfdhsfdj",
      "observaciones": "sfdjdsfj",
      "fecha_Emision": {
        "$date": "2024-10-04T17:40:15.062Z"
      },
      "realizo": ""
    },
    {
      "hallazgos": "sdfgsdffdsd",
      "impresion": "dshfdhsfdjdsfgdfsg",
      "observaciones": "sfdjdsfjdfshjfhds",
      "fecha_Emision": {
        "$date": "2024-10-04T17:41:50.543Z"
      },
      "realizo": "Donatello Tortuga ninja"
    }
  ]
}